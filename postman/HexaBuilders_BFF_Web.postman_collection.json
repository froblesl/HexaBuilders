{
	"info": {
		"_postman_id": "hexabuilders-bff-web-collection",
		"name": "HexaBuilders BFF Web - GraphQL",
		"description": "Colección de Postman para probar el BFF Web con GraphQL de HexaBuilders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "hexabuilders-bff"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "REST Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Health check REST del BFF Web"
					},
					"response": []
				},
				{
					"name": "GraphQL Health Check",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query {\\n    health {\\n      service\\n      status\\n      pattern\\n      sagaTypes\\n      eventDispatcher\\n      timestamp\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Health check GraphQL del BFF Web"
					},
					"response": []
				}
			],
			"description": "Endpoints de health check"
		},
		{
			"name": "Schema Introspection",
			"item": [
				{
					"name": "Get Schema SDL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/schema",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"schema"
							]
						},
						"description": "Obtiene el schema GraphQL en formato SDL"
					},
					"response": []
				},
				{
					"name": "Introspection Query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query IntrospectionQuery {\\n    __schema {\\n      queryType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n      mutationType {\\n        name\\n        fields {\\n          name\\n          description\\n          type {\\n            name\\n          }\\n        }\\n      }\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Query de introspección para obtener información del schema"
					},
					"response": []
				}
			],
			"description": "Endpoints para explorar el schema GraphQL"
		},
		{
			"name": "Saga Management",
			"item": [
				{
					"name": "Start Partner Onboarding - Basic",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"TechSolutions Inc\",\n        \"email\": \"contact@techsolutions.com\",\n        \"telefono\": \"+1234567890\",\n        \"tipoPartner\": \"EMPRESA\",\n        \"preferredContractType\": \"PREMIUM\",\n        \"requiredDocuments\": [\"IDENTITY\", \"BUSINESS_REGISTRATION\"]\n      },\n      \"correlationId\": \"postman-test-{{$timestamp}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Inicia el proceso de onboarding de un partner básico"
					},
					"response": []
				},
				{
					"name": "Start Partner Onboarding - Complete",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"partnerId\": \"partner-{{$randomUUID}}\",\n        \"nombre\": \"Advanced Tech Corp\",\n        \"email\": \"admin@advancedtech.com\",\n        \"telefono\": \"+1987654321\",\n        \"tipoPartner\": \"EMPRESA\",\n        \"preferredContractType\": \"ENTERPRISE\",\n        \"requiredDocuments\": [\"IDENTITY\", \"BUSINESS_REGISTRATION\", \"TAX_CERTIFICATE\", \"BANK_STATEMENT\"],\n        \"campaignPermissions\": \"{\\\"create_campaigns\\\": true, \\\"manage_budget\\\": true, \\\"view_analytics\\\": true}\",\n        \"recruitmentPreferences\": \"{\\\"job_post_limit\\\": 10, \\\"access_level\\\": \\\"PREMIUM\\\"}\"\n      },\n      \"correlationId\": \"postman-complete-{{$timestamp}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Inicia el proceso de onboarding de un partner con datos completos"
					},
					"response": []
				},
				{
					"name": "Start Partner Onboarding - Individual",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"Juan Pérez\",\n        \"email\": \"juan.perez@email.com\",\n        \"telefono\": \"+573001234567\",\n        \"tipoPartner\": \"INDIVIDUAL\",\n        \"preferredContractType\": \"BASIC\",\n        \"requiredDocuments\": [\"IDENTITY\"]\n      },\n      \"correlationId\": \"postman-individual-{{$timestamp}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Inicia el proceso de onboarding de un partner individual"
					},
					"response": []
				},
				{
					"name": "Start Partner Onboarding - Freelancer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"María García - Freelancer\",\n        \"email\": \"maria.garcia@freelance.com\",\n        \"telefono\": \"+573009876543\",\n        \"tipoPartner\": \"FREELANCER\",\n        \"preferredContractType\": \"STANDARD\",\n        \"requiredDocuments\": [\"IDENTITY\", \"PROFESSIONAL_CERTIFICATE\"]\n      },\n      \"correlationId\": \"postman-freelancer-{{$timestamp}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Inicia el proceso de onboarding de un freelancer"
					},
					"response": []
				}
			],
			"description": "Mutations para iniciar el proceso de onboarding de partners"
		},
		{
			"name": "Saga Status & Monitoring",
			"item": [
				{
					"name": "Get Saga Status - Basic",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSagaStatus($partnerId: String!) {\\n    sagaStatus(partnerId: $partnerId) {\\n      partnerId\\n      sagaType\\n      status\\n      completedSteps\\n      failedSteps\\n      createdAt\\n      updatedAt\\n      correlationId\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Obtiene el estado básico de una Saga"
					},
					"response": []
				},
				{
					"name": "Get Saga Status - Detailed",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSagaStatus($partnerId: String!) {\\n    sagaStatus(partnerId: $partnerId) {\\n      partnerId\\n      sagaType\\n      status\\n      completedSteps\\n      failedSteps\\n      createdAt\\n      updatedAt\\n      correlationId\\n      steps {\\n        stepName\\n        status\\n        startedAt\\n        completedAt\\n        errorMessage\\n      }\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Obtiene el estado detallado de una Saga incluyendo pasos"
					},
					"response": []
				},
				{
					"name": "Get Saga Status - Non-existent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSagaStatus($partnerId: String!) {\\n    sagaStatus(partnerId: $partnerId) {\\n      partnerId\\n      sagaType\\n      status\\n      completedSteps\\n      failedSteps\\n      createdAt\\n      updatedAt\\n      correlationId\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"non-existent-partner-id\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Prueba obtener estado de una Saga que no existe"
					},
					"response": []
				}
			],
			"description": "Queries para monitorear el estado de las Sagas"
		},
		{
			"name": "Saga Compensation",
			"item": [
				{
					"name": "Compensate Saga - Manual",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CompensateSaga($partnerId: String!, $input: CompensationInput!) {\\n    compensateSaga(partnerId: $partnerId, input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\",\n    \"input\": {\n      \"reason\": \"Manual compensation request from Postman\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Inicia compensación manual de una Saga"
					},
					"response": []
				},
				{
					"name": "Compensate Saga - User Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CompensateSaga($partnerId: String!, $input: CompensationInput!) {\\n    compensateSaga(partnerId: $partnerId, input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\",\n    \"input\": {\n      \"reason\": \"User requested cancellation due to change of mind\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Compensación solicitada por el usuario"
					},
					"response": []
				},
				{
					"name": "Compensate Saga - System Error",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CompensateSaga($partnerId: String!, $input: CompensationInput!) {\\n    compensateSaga(partnerId: $partnerId, input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\",\n    \"input\": {\n      \"reason\": \"System error detected in document verification step\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Compensación por error del sistema"
					},
					"response": []
				}
			],
			"description": "Mutations para compensar Sagas en caso de error"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Invalid Query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query {\\n    invalidField {\\n      nonExistentField\\n    }\\n  }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Prueba con query inválida para verificar manejo de errores"
					},
					"response": []
				},
				{
					"name": "Invalid Mutation Variables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"Test\",\n        \"email\": \"invalid-email\",\n        \"telefono\": \"invalid-phone\",\n        \"tipoPartner\": \"INVALID_TYPE\",\n        \"preferredContractType\": \"INVALID_CONTRACT\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Prueba con variables inválidas para verificar validación"
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"Test Partner\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Prueba con campos requeridos faltantes"
					},
					"response": []
				}
			],
			"description": "Tests para verificar el manejo de errores"
		},
		{
			"name": "Performance Testing",
			"item": [
				{
					"name": "Multiple Concurrent Onboarding",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartPartnerOnboarding($input: PartnerOnboardingInput!) {\\n    startPartnerOnboarding(input: $input) {\\n      success\\n      message\\n      partnerId\\n      timestamp\\n    }\\n  }\",\n  \"variables\": {\n    \"input\": {\n      \"partnerData\": {\n        \"nombre\": \"Concurrent Test {{$randomInt}}\",\n        \"email\": \"test{{$randomInt}}@concurrent.com\",\n        \"telefono\": \"+57300{{$randomInt}}\",\n        \"tipoPartner\": \"EMPRESA\",\n        \"preferredContractType\": \"STANDARD\",\n        \"requiredDocuments\": [\"IDENTITY\"]\n      },\n      \"correlationId\": \"concurrent-test-{{$timestamp}}-{{$randomInt}}\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Test de onboarding concurrente (usar con Collection Runner)"
					},
					"response": []
				},
				{
					"name": "Bulk Status Check",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSagaStatus($partnerId: String!) {\\n    sagaStatus(partnerId: $partnerId) {\\n      partnerId\\n      status\\n      completedSteps\\n      failedSteps\\n    }\\n  }\",\n  \"variables\": {\n    \"partnerId\": \"{{partner_id}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/graphql",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "Test de consulta de estado (usar con Collection Runner)"
					},
					"response": []
				}
			],
			"description": "Tests de rendimiento y concurrencia"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Generar partner_id si no existe",
					"if (!pm.environment.get('partner_id')) {",
					"    pm.environment.set('partner_id', 'partner-' + pm.variables.replaceIn('{{$randomUUID}}'));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tests básicos para todas las requests",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has valid JSON', function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Test específico para GraphQL responses",
					"if (pm.request.url.path.includes('graphql')) {",
					"    const responseJson = pm.response.json();",
					"    ",
					"    pm.test('GraphQL response has data or errors', function () {",
					"        pm.expect(responseJson).to.have.property('data').or.have.property('errors');",
					"    });",
					"    ",
					"    if (responseJson.errors) {",
					"        pm.test('GraphQL errors are properly formatted', function () {",
					"            pm.expect(responseJson.errors).to.be.an('array');",
					"            pm.expect(responseJson.errors[0]).to.have.property('message');",
					"        });",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "partner_id",
			"value": "",
			"type": "string"
		}
	]
}
