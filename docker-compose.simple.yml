services:
  # Apache Pulsar services for event communication
  zookeeper:
    image: apachepulsar/pulsar:3.1.0
    container_name: hexabuilders-zookeeper
    restart: on-failure
    networks:
      - hexabuilders
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_conf:/pulsar/conf
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
               bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
               exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  pulsar-init:
    image: apachepulsar/pulsar:3.1.0
    container_name: hexabuilders-pulsar-init
    networks:
      - hexabuilders
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/client.conf &&
               until nslookup zookeeper; do sleep 3; done &&
               bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650"
    depends_on:
      zookeeper:
        condition: service_healthy

  bookie:
    image: apachepulsar/pulsar:3.1.0
    container_name: hexabuilders-bookie
    restart: on-failure
    networks:
      - hexabuilders
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      - advertisedAddress=bookie
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_conf:/pulsar/conf
    command: >
      bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && \
               bin/apply-config-from-env.py conf/pulsar_env.sh && \
               exec bin/pulsar bookie"

  broker:
    image: apachepulsar/pulsar:3.1.0
    container_name: hexabuilders-broker
    hostname: broker
    restart: on-failure
    networks:
      - hexabuilders
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      pulsar-init:
        condition: service_completed_successfully
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - pulsar_data:/pulsar/data
      - pulsar_conf:/pulsar/conf
    command: >
      bash -c "bin/apply-config-from-env.py conf/broker.conf && \
               bin/apply-config-from-env.py conf/pulsar_env.sh && \
               exec bin/pulsar broker"

  # ElasticSearch for search capabilities
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: hexabuilders-elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hexabuilders
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Partner Management Service (Python Flask)
  partner-management:
    image: python:3.11-slim
    container_name: hexabuilders-partner-management
    working_dir: /app
    networks:
      - hexabuilders
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://hexabuilders_user:hexabuilders_password@host.docker.internal:5432/hexabuilders
      - PULSAR_BROKER_URL=pulsar://broker:6650
      - PULSAR_ADMIN_URL=http://broker:8080
      - FLASK_ENV=production
      - SERVICE_PORT=5000
    ports:
      - "5010:5000"
    volumes:
      - .:/app
    depends_on:
      broker:
        condition: service_started
    command: >
      bash -c "
        apt-get update && apt-get install -y gcc g++ libpq-dev curl && 
        pip install -r requirements.txt && 
        pip install -r pulsar-requirements.txt && 
        python -m partner_management.seedwork.presentacion.api
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Onboarding Service
  onboarding:
    image: python:3.11-slim
    container_name: hexabuilders-onboarding
    working_dir: /app
    networks:
      - hexabuilders
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://hexabuilders_user:hexabuilders_password@host.docker.internal:5432/hexabuilders
      - PULSAR_BROKER_URL=pulsar://broker:6650
      - PULSAR_ADMIN_URL=http://broker:8080
      - FLASK_ENV=production
      - SERVICE_PORT=5001
    ports:
      - "5011:5001"
    volumes:
      - .:/app
    depends_on:
      broker:
        condition: service_started
    command: >
      bash -c "
        apt-get update && apt-get install -y gcc g++ libpq-dev curl && 
        pip install -r requirements.txt && 
        pip install -r pulsar-requirements.txt && 
        python -m onboarding.seedwork.presentacion.api
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Recruitment Service  
  recruitment:
    image: python:3.11-slim
    container_name: hexabuilders-recruitment
    working_dir: /app
    networks:
      - hexabuilders
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://hexabuilders_user:hexabuilders_password@host.docker.internal:5432/hexabuilders
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PULSAR_BROKER_URL=pulsar://broker:6650
      - PULSAR_ADMIN_URL=http://broker:8080
      - FLASK_ENV=production
      - SERVICE_PORT=5002
    ports:
      - "5012:5002"
    volumes:
      - .:/app
    depends_on:
      elasticsearch:
        condition: service_healthy
      broker:
        condition: service_started
    command: >
      bash -c "
        apt-get update && apt-get install -y gcc g++ libpq-dev curl && 
        pip install -r requirements.txt && 
        pip install -r pulsar-requirements.txt && 
        python -m recruitment.seedwork.presentacion.api
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Campaign Management Service
  campaign-management:
    image: python:3.11-slim
    container_name: hexabuilders-campaign-management
    working_dir: /app
    networks:
      - hexabuilders
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://hexabuilders_user:hexabuilders_password@host.docker.internal:5432/hexabuilders
      - PULSAR_BROKER_URL=pulsar://broker:6650
      - PULSAR_ADMIN_URL=http://broker:8080
      - FLASK_ENV=production
      - SERVICE_PORT=5003
    ports:
      - "5013:5003"
    volumes:
      - .:/app
    depends_on:
      broker:
        condition: service_started
    command: >
      bash -c "
        apt-get update && apt-get install -y gcc g++ libpq-dev curl && 
        pip install -r requirements.txt && 
        pip install -r pulsar-requirements.txt && 
        python -m campaign_management.seedwork.presentacion.api
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  hexabuilders:
    driver: bridge

volumes:
  pulsar_data:
  pulsar_conf:
  elasticsearch_data: