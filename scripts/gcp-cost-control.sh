#!/bin/bash
# HexaBuilders - Control de Costos GCP
# Script para apagar/encender servicios y ahorrar dinero

set -e

CLUSTER_NAME="hexabuilders-cluster"
ZONE="us-central1-a"
NAMESPACE="hexabuilders"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar ayuda
show_help() {
    echo "üèóÔ∏è  HexaBuilders - Control de Costos GCP"
    echo ""
    echo "Uso: $0 [COMANDO]"
    echo ""
    echo "Comandos disponibles:"
    echo "  shutdown       üõë Apagar cluster (0 nodos) - Ahorra ~\$25/mes"
    echo "  startup        ‚úÖ Encender cluster (1 nodo)"
    echo "  shutdown-lb    üõë Eliminar Load Balancer - Ahorra ~\$18/mes adicionales"
    echo "  startup-lb     ‚úÖ Recrear Load Balancer"
    echo "  status         üìä Ver estado actual y costos"
    echo "  costs          üí∞ Mostrar desglose de costos"
    echo "  destroy        üí• Eliminar TODO (usar con cuidado)"
    echo ""
    echo "Ejemplos:"
    echo "  $0 shutdown        # Apagar para fin de semana"
    echo "  $0 startup         # Encender para trabajar"
    echo "  $0 status          # Ver que est√° corriendo"
}

# Funci√≥n para mostrar estado actual
show_status() {
    echo -e "${YELLOW}üìä Estado actual del cluster:${NC}"
    
    # Verificar si el cluster existe
    if ! gcloud container clusters describe $CLUSTER_NAME --zone=$ZONE &>/dev/null; then
        echo -e "${RED}‚ùå Cluster no existe${NC}"
        return 1
    fi
    
    # Obtener n√∫mero de nodos
    NODE_COUNT=$(gcloud container clusters describe $CLUSTER_NAME --zone=$ZONE --format="value(currentNodeCount)")
    
    if [ "$NODE_COUNT" = "0" ]; then
        echo -e "${RED}üõë Cluster APAGADO (0 nodos) - Costo: ~\$0/mes por compute${NC}"
        echo -e "${GREEN}üí∞ Ahorrando: ~\$25/mes${NC}"
    else
        echo -e "${GREEN}‚úÖ Cluster ENCENDIDO ($NODE_COUNT nodos) - Costo: ~\$25/mes${NC}"
        
        # Verificar pods
        echo -e "${YELLOW}üì¶ Pods en ejecuci√≥n:${NC}"
        kubectl get pods -n $NAMESPACE 2>/dev/null || echo "No se puede conectar a kubectl"
    fi
    
    # Verificar Load Balancer
    if kubectl get service partner-management-lb -n $NAMESPACE &>/dev/null; then
        LB_IP=$(kubectl get service partner-management-lb -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pendiente")
        echo -e "${GREEN}üåê Load Balancer ACTIVO - IP: $LB_IP - Costo: ~\$18/mes${NC}"
    else
        echo -e "${RED}üåê Load Balancer INACTIVO - Ahorrando: ~\$18/mes${NC}"
    fi
}

# Funci√≥n para mostrar costos
show_costs() {
    echo -e "${YELLOW}üí∞ Desglose de Costos (USD/mes):${NC}"
    echo ""
    echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
    echo "‚îÇ Servicio                    ‚îÇ Encendido   ‚îÇ Apagado      ‚îÇ"
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
    echo "‚îÇ üñ•Ô∏è  Cluster GKE (1 nodo e2-small) ‚îÇ ~\$25/mes   ‚îÇ \$0/mes      ‚îÇ"
    echo "‚îÇ üåê Load Balancer            ‚îÇ ~\$18/mes   ‚îÇ \$0/mes      ‚îÇ"
    echo "‚îÇ üíæ Discos Persistentes      ‚îÇ ~\$3/mes    ‚îÇ ~\$3/mes     ‚îÇ"
    echo "‚îÇ üì¶ Container Registry       ‚îÇ ~\$0.1/mes  ‚îÇ ~\$0.1/mes   ‚îÇ"
    echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"
    echo "‚îÇ üí∞ TOTAL                    ‚îÇ ~\$46/mes   ‚îÇ ~\$3/mes     ‚îÇ"
    echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    echo ""
    echo -e "${GREEN}üí° Ahorro m√°ximo: ~\$43/mes (93% reducci√≥n)${NC}"
}

# Funci√≥n para apagar cluster
shutdown_cluster() {
    echo -e "${YELLOW}üõë Apagando cluster (escalando a 0 nodos)...${NC}"
    gcloud container clusters resize $CLUSTER_NAME --num-nodes=0 --zone=$ZONE --quiet
    echo -e "${GREEN}‚úÖ Cluster apagado. Ahorrando ~\$25/mes${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Para encender: $0 startup${NC}"
}

# Funci√≥n para encender cluster
startup_cluster() {
    echo -e "${YELLOW}‚úÖ Encendiendo cluster (escalando a 1 nodo)...${NC}"
    gcloud container clusters resize $CLUSTER_NAME --num-nodes=1 --zone=$ZONE --quiet
    echo -e "${GREEN}‚úÖ Cluster encendido. Esperando que los pods est√©n listos...${NC}"
    
    # Esperar a que los pods est√©n listos
    echo -e "${YELLOW}‚è≥ Esperando pods (esto puede tomar 2-3 minutos)...${NC}"
    sleep 60
    kubectl wait --for=condition=ready pod --all -n $NAMESPACE --timeout=300s || echo "Algunos pods a√∫n se est√°n iniciando"
    
    echo -e "${GREEN}üéâ Sistema listo para usar${NC}"
    
    # Mostrar IP del Load Balancer si existe
    if kubectl get service partner-management-lb -n $NAMESPACE &>/dev/null; then
        LB_IP=$(kubectl get service partner-management-lb -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
        if [ ! -z "$LB_IP" ]; then
            echo -e "${GREEN}üåê Acceso: http://$LB_IP/health${NC}"
        fi
    fi
}

# Funci√≥n para eliminar Load Balancer
shutdown_lb() {
    echo -e "${YELLOW}üõë Eliminando Load Balancer...${NC}"
    kubectl delete service partner-management-lb -n $NAMESPACE
    echo -e "${GREEN}‚úÖ Load Balancer eliminado. Ahorrando ~\$18/mes adicionales${NC}"
    echo -e "${YELLOW}‚ÑπÔ∏è  Para recrear: $0 startup-lb${NC}"
}

# Funci√≥n para recrear Load Balancer
startup_lb() {
    echo -e "${YELLOW}‚úÖ Recreando Load Balancer...${NC}"
    kubectl expose deployment partner-management --type=LoadBalancer --port=80 --target-port=5000 --name=partner-management-lb -n $NAMESPACE
    echo -e "${GREEN}‚úÖ Load Balancer creado. Esperando IP externa...${NC}"
    kubectl get service partner-management-lb -n $NAMESPACE -w
}

# Funci√≥n para eliminar TODO (usar con cuidado)
destroy_all() {
    echo -e "${RED}üí• ADVERTENCIA: Esto eliminar√° TODO el cluster${NC}"
    read -p "¬øEst√°s seguro? Escribe 'ELIMINAR' para confirmar: " confirm
    if [ "$confirm" = "ELIMINAR" ]; then
        echo -e "${YELLOW}üóëÔ∏è  Eliminando cluster completo...${NC}"
        gcloud container clusters delete $CLUSTER_NAME --zone=$ZONE --quiet
        echo -e "${GREEN}‚úÖ Cluster eliminado completamente${NC}"
        echo -e "${YELLOW}‚ÑπÔ∏è  Las im√°genes en Container Registry se mantienen${NC}"
        echo -e "${YELLOW}‚ÑπÔ∏è  Para recrear: seguir la gu√≠a completa${NC}"
    else
        echo -e "${YELLOW}‚ùå Cancelado${NC}"
    fi
}

# Main script logic
case "${1:-help}" in
    "shutdown")
        shutdown_cluster
        ;;
    "startup")
        startup_cluster
        ;;
    "shutdown-lb")
        shutdown_lb
        ;;
    "startup-lb")
        startup_lb
        ;;
    "status")
        show_status
        ;;
    "costs")
        show_costs
        ;;
    "destroy")
        destroy_all
        ;;
    "help"|*)
        show_help
        ;;
esac
